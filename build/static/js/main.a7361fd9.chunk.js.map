{"version":3,"sources":["components/Button.jsx","main/Calculator.jsx","components/Display.jsx","registerServiceWorker.js","index.js"],"names":["props","classes","operation","double","triple","onClick","e","click","label","className","initialState","displayValue","clearDisplay","lastOperation","values","current","fullOperation","Calculator","state","clearMemory","bind","setOperation","addDigit","display","this","setState","equals","currentOperation","fullExceptLastOperation","slice","result","eval","Number","isInteger","toFixed","n","includes","match","lastIndex","lastIndexOf","length","i","newValue","parseFloat","value","Component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a7361fd9.chunk.js","sourcesContent":["import React from 'react'\nimport './Button.css'\n\nexport default props => {\n    let classes = 'button '\n    classes += props.operation ? 'operation' : ''\n    classes += props.double ? 'double' : ''\n    classes += props.triple ? 'triple' : ''\n    \n    return (\n        <button \n            onClick={e => props.click && props.click(props.label)}\n            className={classes}>\n            {props.label}\n        </button>\n    )\n}","import React, { Component } from 'react'\nimport './Calculator.css'\n\nimport Button from '../components/Button'\nimport Display from '../components/Display'\n\nconst initialState = {\n    displayValue: '0',\n    clearDisplay: false,\n    operation: null,\n    lastOperation: null,\n    values: [0, 0],\n    current: 0,\n    fullOperation: \"\"\n}\n\nexport default class Calculator extends Component {\n\n    state = { ...initialState }\n\n    constructor(props) {\n        super(props)\n\n        this.clearMemory = this.clearMemory.bind(this)\n        this.setOperation = this.setOperation.bind(this)\n        this.addDigit = this.addDigit.bind(this)\n    }\n\n    clearMemory(operation, display) {\n        this.setState({ \n                ...initialState, \n                displayValue: !!display ? display : '0',\n                clearDisplay: !!display\n            })\n    }\n\n    setOperation(operation) {\n\n        const equals = operation === '=';\n        let fullOperation = this.state.fullOperation;\n\n        if (this.state.current === 0) {\n            this.setState({ \n                operation, \n                lastOperation: operation,\n                current: 1, \n                clearDisplay: true,\n                fullOperation: !equals ? fullOperation += operation : \"\"\n            })\n        } else {            \n            const currentOperation = this.state.operation\n            const lastOperation = this.state.lastOperation\n\n            // if isn't equals or isn't null\n            if (!equals && !!currentOperation) {\n                let fullExceptLastOperation = fullOperation;\n                fullExceptLastOperation = fullExceptLastOperation.slice(0, -1);\n                this.setState({\n                    operation: operation,\n                    lastOperation: equals ? null : operation,\n                    fullOperation: fullExceptLastOperation += operation\n                })\n            }\n            else {\n                const values = [...this.state.values];\n                try {\n                    const result = eval(`${values[0]} ${lastOperation} ${values[1]}`);\n                    values[0] = !!result ? \n                    (\n                            Number.isInteger(result) ? result \n                            : Number(result.toFixed(2))\n                    )                    \n                    : 0;\n                } catch (e) {\n                    values[0] = this.state.values[0]\n                }\n\n                values[1] = 0\n\n                if (!equals) {\n                    this.setState({\n                        displayValue: values[0],\n                        operation: equals ? null : operation,\n                        lastOperation: equals ? null : operation,\n                        current: equals ? 0 : 1,\n                        clearDisplay: !equals,\n                        values,\n                        fullOperation: fullOperation += operation\n                    })\n                }\n                else {\n                    this.clearMemory(null, values[0])\n                }\n\n            }\n        }\n    }\n\n    addDigit(n) {\n        if (n === '.' && this.state.displayValue.includes('.')) {\n            return\n        }\n\n        const clearDisplay = this.state.displayValue === '0'\n            || this.state.clearDisplay\n        const currentValue = clearDisplay ? '' : this.state.displayValue\n        const displayValue = currentValue + n\n\n\n        let fullOperation = this.state.fullOperation;\n        const match = fullOperation.match(/[+*\\/-]/g);\n        if (match) {\n            const lastIndex = fullOperation.lastIndexOf(match[match.length - 1]);\n            if ((fullOperation.length - 1) !== lastIndex) {\n                fullOperation = fullOperation.slice(0, lastIndex + 1) + displayValue;\n            }\n            else {\n                fullOperation += n;\n            }\n        }\n        else\n            fullOperation += n;\n\n\n        this.setState({ \n            displayValue, \n            clearDisplay: false, \n            fullOperation,\n            operation: null\n        })\n\n        if (n !== '.') {\n            const i = this.state.current\n            const newValue = parseFloat(displayValue)\n            const values = [...this.state.values]\n            values[i] = newValue\n            this.setState({ values })\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"calculator\">\n                <Display value={this.state.displayValue} fullOperation={this.state.fullOperation} />\n                <Button label=\"AC\" click={this.clearMemory} triple />\n                <Button label=\"/\" click={this.setOperation} operation />\n                <Button label=\"7\" click={this.addDigit} />\n                <Button label=\"8\" click={this.addDigit} />\n                <Button label=\"9\" click={this.addDigit} />\n                <Button label=\"*\" click={this.setOperation} operation />\n                <Button label=\"4\" click={this.addDigit} />\n                <Button label=\"5\" click={this.addDigit} />\n                <Button label=\"6\" click={this.addDigit} />\n                <Button label=\"-\" click={this.setOperation} operation />\n                <Button label=\"1\" click={this.addDigit} />\n                <Button label=\"2\" click={this.addDigit} />\n                <Button label=\"3\" click={this.addDigit} />\n                <Button label=\"+\" click={this.setOperation} operation />\n                <Button label=\"0\" click={this.addDigit} double />\n                <Button label=\".\" click={this.addDigit} />\n                <Button label=\"=\" click={this.setOperation} operation />\n                \n            </div>\n        )\n    }\n}","import React from 'react'\nimport './Display.css'\n\nexport default props => <>\n        <div className=\"display-historic\">{props.fullOperation}</div>\n        <div className=\"display\">{props.value}</div>\n    </>","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './main/Calculator';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n    <div>\n        <Calculator />\n    </div>\n, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}